---
import { ViewTransitions } from "astro:transitions";
import BaseHead from "../components/BaseHead.astro";
import Header from "../components/Header.vue";
import Footer from "../components/Footer.vue";
import PageOperate from "../components/PageOperate.vue";

const {
  pageNav = false,
  pageOperate = false,
  width = "max-w-3xl",
  tags = [],
  next,
  comments = false,
  newsletter = false,
  ...head
} = Astro.props;
---

<!doctype html>
<html lang="en">
  <head>
    <BaseHead {...head} />
    <ViewTransitions />
  </head>
  <body class="bg-main text-main min-h-screen font-sans w-full">
    <Header client:load pathname={Astro.url.pathname} />
    <main class:list={["grow mx-auto py-10 px-6", width]}>
      <slot />
      {
        pageOperate && (
          <div mt-8>
            <PageOperate
              client:load
              showShare={head.pageType === "article"}
              url={Astro.url}
              tags={tags}
              next={next}
            />
          </div>
        )
      }
      {
        newsletter && (
          <div class="mt-6 pt-6 border-t border-gray-200">
            <div class="mb-4 text-sm">Join my newsletter to be the first to know about new blog posts :)</div>
            <script
              async
              data-uid="65bc3a0932"
              src="https://boristane.ck.page/65bc3a0932/index.js"
            />
          </div>
        )
      }
      {
        comments && (
          <div class="mt-4 pt-4 border-t border-gray-200">
            <script
              src="https://utteranc.es/client.js"
              repo="boristane/website"
              issue-term="url"
              label="comment"
              theme="github-light"
              crossorigin="anonymous"
              async
            />
          </div>
        )
      }
    </main>
    <Footer />
    <script>
      import mermaid from 'mermaid';

      mermaid.initialize({
        startOnLoad: false,
        theme: 'default',
      });

      async function renderMermaidDiagrams() {
        await new Promise(resolve => setTimeout(resolve, 0));

        const mermaidElements = document.querySelectorAll('.mermaid:not([data-processed])');

        if (mermaidElements.length === 0) {
          return;
        }

        for (const element of mermaidElements) {
          try {
            element.setAttribute('data-processed', 'true');

            const graphDefinition = element.textContent;

            if (!graphDefinition || graphDefinition.trim() === '') {
              continue;
            }

            const id = `mermaid-${Math.random().toString(36).substring(2, 11)}`;

            const { svg } = await mermaid.render(id, graphDefinition);

            element.innerHTML = svg;
          } catch (error) {
            console.error('Mermaid rendering error for element:', error);
            element.removeAttribute('data-processed');
          }
        }
      }

      // Initial load
      document.addEventListener('DOMContentLoaded', renderMermaidDiagrams);

      // Re-render on page transitions
      document.addEventListener('astro:page-load', renderMermaidDiagrams);
    </script>
  </body>
</html>
